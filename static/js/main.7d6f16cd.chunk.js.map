{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","firstWord","setFirstWord","secondWord","setSecondWord","isDarkTheme","setIsDarkTheme","className","value","onChange","e","target","style","justifySelf","type","checked","id","backgroundColor","display","padding","color","paddingRight","onClick","toPng","document","getElementById","then","dataUrl","download","toSvg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2OAyEeA,MAnEf,WAAgB,IAAD,EACqBC,mBAAS,OAD9B,mBACNC,EADM,KACKC,EADL,OAEuBF,mBAAS,OAFhC,mBAENG,EAFM,KAEMC,EAFN,OAGyBJ,oBAAS,GAHlC,mBAGNK,EAHM,KAGOC,EAHP,KAKb,OACE,sBAAKC,UAAU,mBAAf,UACE,sBAAKA,UAAU,oBAAf,UACE,uBACEA,UAAU,qBACVC,MAAOP,EAAWQ,SAAU,SAACC,GAC3BR,EAAaQ,EAAEC,OAAOH,UAE1B,uBACED,UAAU,qBACVC,MAAOL,EAAYM,SAAU,SAACC,GAC5BN,EAAcM,EAAEC,OAAOH,UAE3B,qBAAKI,MAAO,CAAEC,YAAa,SAA3B,SACE,uBAAON,UAAU,KAAjB,SAAsB,+CAExB,qBAAKK,MAAO,CAAEC,YAAa,QAA3B,SACE,wBAAON,UAAU,SAAjB,UACE,uBAAOC,MAAOH,EAAaS,KAAK,WAAWL,SAAU,SAACC,GACpDJ,EAAeI,EAAEC,OAAOI,YAE1B,sBAAMR,UAAU,yBAItB,qBAAKA,UAAU,0BAAf,SACE,qBAAKS,GAAG,OAAOJ,MAAO,CACpBK,gBAAiBZ,EAAc,QAAU,OACzCa,QAAS,eACTC,QAAS,IAHX,SAKE,oBAAGZ,UAAU,YAAb,UACGN,GAAa,sBAAMW,MAAO,CACzBQ,MAAOf,EAAc,QAAU,QAC/BgB,aAAclB,EAAa,GAAK,GAFpB,SAGVF,IACHE,GAAc,sBAAMI,UAAU,cAAhB,SAA+BJ,WAIpD,sBAAKI,UAAU,6EAAf,UACE,8BACE,wBAAQA,UAAU,iBAAiBe,QAAS,WAC1CC,YAAMC,SAASC,eAAe,SAC3BC,MAAK,SAAUC,GACdC,IAASD,EAAS,gBAHxB,0BAOF,8BACE,wBAAQpB,UAAU,iBAAiBe,QAAS,WAC1CO,YAAML,SAASC,eAAe,SAC3BC,MAAK,SAAUC,GACdC,IAASD,EAAS,gBAHxB,iCCjDKG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.7d6f16cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport download from 'downloadjs';\nimport { toPng, toSvg } from 'html-to-image';\n\nimport './App.css';\n\nfunction App() {\n  const [firstWord, setFirstWord] = useState(\"Git\");\n  const [secondWord, setSecondWord] = useState(\"hub\");\n  const [isDarkTheme, setIsDarkTheme] = useState(true);\n\n  return (\n    <div className=\"d-flex App mt-20\">\n      <div className=\"d-grid grid-input\">\n        <input\n          className=\"ff input-font-size\"\n          value={firstWord} onChange={(e) => {\n            setFirstWord(e.target.value);\n          }} />\n        <input\n          className=\"ff input-font-size\"\n          value={secondWord} onChange={(e) => {\n            setSecondWord(e.target.value);\n          }} />\n        <div style={{ justifySelf: \"right\" }}>\n          <label className=\"ff\"><b>Dark theme</b></label>\n        </div>\n        <div style={{ justifySelf: \"left\" }}>\n          <label className=\"switch\">\n            <input value={isDarkTheme} type=\"checkbox\" onChange={(e) => {\n              setIsDarkTheme(e.target.checked);\n            }} />\n            <span className=\"slider round\"></span>\n          </label>\n        </div>\n      </div>\n      <div className=\"mt-20 text-align-center\">\n        <div id=\"logo\" style={{\n          backgroundColor: isDarkTheme ? \"black\" : \"aqua\",\n          display: \"inline-block\",\n          padding: 10,\n        }}>\n          <p className=\"logo-text\">\n            {firstWord && <span style={{\n              color: isDarkTheme ? \"white\" : \"black\",\n              paddingRight: secondWord ? 10 : 0,\n            }}>{firstWord}</span>}\n            {secondWord && <span className=\"second-word\">{secondWord}</span>}\n          </p>\n        </div>\n      </div>\n      <div className=\"export-btn-container d-flex mt-20 align-items-center jutify-content-center\">\n        <div>\n          <button className=\"ff btn primary\" onClick={() => {\n            toPng(document.getElementById('logo'))\n              .then(function (dataUrl) {\n                download(dataUrl, 'logo.png');\n              });\n          }}>Export png</button>\n        </div>\n        <div>\n          <button className=\"ff btn primary\" onClick={() => {\n            toSvg(document.getElementById('logo'))\n              .then(function (dataUrl) {\n                download(dataUrl, 'logo.svg');\n              });\n          }}>Export svg</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}